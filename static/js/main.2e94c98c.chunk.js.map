{"version":3,"sources":["images/guide.JPG","shared/models/datapoint.js","shared/models/city-row-data.js","components/city-aqi-table/city-aqi-table.js","shared/utility.js","components/city-aqi-chart/city-aqi-chart.js","components/city-aqi-chart/chart-config.js","App.js","reportWebVitals.js","index.js"],"names":["DataPoint","timestamp","aqi","this","CityRowData","cityName","dataPoints","CityAqiTable","citiesData","selectedCityRowData","onRowSelect","useState","citiesTable","setCitiesTable","useEffect","updateCityAqiTable","citiesTable_clone","clone","forEach","num","decimal","city","aqiVal","parseFloat","toFixed","currTimeStamp","Date","getTime","dataPoint","currCityRowData","filter","data","toLowerCase","currCityDataPoints","length","shift","push","cityData","lastUpdateStatus","getlastUpdateStatus","getAqiCategoryClass","aqiValue","defaultclass","Math","floor","lastUpdatedTime","lastUpdatedDate","timeDiff","tag","className","Row","Col","Table","bordered","style","display","map","cityRowData","i","onClick","scope","slice","Card","CardBody","CardTitle","CardImg","top","src","guideImg","alt","CityAqiChart","series","setSeries","options","setOptions","seriesData","timestamps","dp","minTimeStamp","min","op","chart","id","type","height","zoom","autoScaleYaxis","annotations","yaxis","y","borderColor","label","show","text","color","background","dataLabels","enabled","markers","size","title","align","xaxis","tickAmount","labels","formatter","val","toString","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","chartOptions","x","generateChartData","App","ws","WebSocket","setCitiesData","setSelectedCityRowData","connect","onopen","console","log","onmessage","throttle","evt","message","JSON","parse","onclose","selectedRowData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAAe,G,MAAA,IAA0B,mC,QCApBA,EACjB,WAAYC,EAAWC,GAAM,oBACzBC,KAAKF,UAAYA,EACjBE,KAAKD,IAAMA,GCHEE,EACjB,WAAYC,GAA4B,IAAlBC,EAAiB,uDAAJ,GAAI,oBACnCH,KAAKE,SAAWA,EAChBF,KAAKG,WAAaA,G,OC8HXC,EAxHM,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,oBAAqBC,EAAkB,EAAlBA,YAEvD,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAGAC,qBAAU,WACRC,MACC,CAACP,IAEJ,IAAMO,EAAqB,WACzB,IAAIC,EAAoBC,gBAAML,GAE9BJ,EAAWU,SAAQ,YAAoB,ICpBTC,EAAKC,EDoBbC,EAAgB,EAAhBA,KAAMnB,EAAU,EAAVA,IAEpBoB,GCtBsBH,EDsBKI,WAAWrB,GCtBXkB,EDsBiB,ECrB7CG,WAAWJ,EAAIK,QAAQJ,KDsBtBK,GAAgB,IAAIC,MAAOC,UAC3BC,EAAY,IAAI5B,EAAUyB,EAAeH,GACzCO,EAAkBb,EAAkBc,QAAO,SAAAC,GAAI,OAAIA,EAAK1B,SAAS2B,gBAAkBX,EAAKW,iBAAe,GAI7G,GAAIH,EAAiB,CAGnB,IAAMI,EAAqBJ,EAAgBvB,WACvC2B,EAAmBC,QAtBJ,IAuBjBD,EAAmBE,QAErBF,EAAmBG,KAAKR,OACnB,CACL,IAAMS,EAAW,IAAIjC,EAAYiB,EAAM,CAACO,IACxCZ,EAAkBoB,KAAKC,OAK3BrB,EAAkBE,SAAQ,SAAAmB,GACxBA,EAASC,iBAAmBC,EAAoBF,EAAS/B,WAAW+B,EAAS/B,WAAW4B,OAAS,GAAGjC,cAGtGY,EAAeG,IAGXwB,EAAsB,SAACC,GAC3B,IAAIC,EAAe,MAiBnB,OAfAD,EAAWE,KAAKC,MAAMH,KAEN,GAAKA,GAAY,GAC/BC,GAA8B,QACrBD,GAAY,IAAMA,GAAY,IACvCC,GAA8B,gBACrBD,GAAY,KAAOA,GAAY,IACxCC,GAA8B,YACrBD,GAAY,KAAOA,GAAY,IACxCC,GAA8B,QACrBD,GAAY,KAAOA,GAAY,IACxCC,GAA8B,YACrBD,GAAY,KAAOA,GAAY,MACxCC,GAA8B,WAEzBA,GAGHH,EAAsB,SAACM,GAC3B,IAAMC,EAAkB,IAAIpB,KAAKmB,GAE3BE,IADW,IAAIrB,MACMC,UAAYmB,EAAgBnB,WAAa,IACpE,OAAIoB,EAAW,EACN,uBAED,GAAN,OAAUJ,KAAKC,MAAMG,GAArB,iBAIJ,OACE,gCACE,oBAAIC,IAAI,KAAKC,UAAU,WAAvB,+BACA,eAACC,EAAA,EAAD,CAAKD,UAAU,WAAf,UACE,cAACE,EAAA,EAAD,UACE,qBAAKF,UAAU,uBAAf,SACE,eAACG,EAAA,EAAD,CAAOC,UAAQ,EAAf,UACE,gCACE,qBAAIC,MAAO,CAAEC,QAAS,SAAtB,UACE,mCACA,sCACA,6CACA,mDAGJ,gCACG3C,EAAY4C,KAAI,SAACC,EAAaC,GAAd,OACf,qBACET,UAAWxC,GAAuBA,EAAoBJ,WAAaoD,EAAYpD,SAAW,WAAa,GACvGsD,QAAS,kBAAMjD,EAAY+C,IAF7B,UAGE,oBAAIG,MAAM,MAAV,SAAiBF,EAAI,IACrB,6BAAKD,EAAYpD,WACjB,oBAAI4C,UAAWT,EAAoBiB,EAAYnD,WAAWuD,OAAO,GAAG,GAAG3D,KAAvE,SACGuD,EAAYnD,WAAWuD,OAAO,GAAG,GAAG3D,MAEvC,6BAAKuD,EAAYnB,qBARVmB,EAAYpD,sBAe/B,cAAC8C,EAAA,EAAD,CAAKF,UAAU,cAAf,SACE,eAACa,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAWhB,IAAI,KAAf,0CAEF,cAACiB,EAAA,EAAD,CAASC,KAAG,EAACC,IAAKC,EAAUC,IAAI,0B,yBExF7BC,EA5BM,SAAC,GAA8B,IAA5BjE,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAEhC,EAA4BK,mBAAS,IAArC,mBAAO4D,EAAP,KAAeC,EAAf,KACA,EAA8B7D,mBAAS,IAAvC,mBAAO8D,EAAP,KAAgBC,EAAhB,KAkBA,OAhBA5D,qBAAU,YAIV,WACE,IAAI6D,EAAa,GACXC,EAAatE,EAAWkD,KAAI,SAAAqB,GAAE,OAAIA,EAAG5E,aACrC6E,EAAenC,KAAKoC,IAAL,MAAApC,KAAI,YAAQiC,IAC3BI,EAAK/D,gBClBa,SAACZ,EAAUyE,GAEnC,MAAO,CACHP,OAAQ,CAAC,CAAExC,KAAM,KACjBkD,MAAO,CACHC,GAAI,gBACJC,KAAM,OACNC,OAAQ,IACRC,KAAM,CACFC,gBAAgB,IAGxBC,YAAa,CACTC,MAAO,CACH,CACIC,EAAG,GACHC,YAAa,OACbC,MAAO,CACHC,MAAM,EACNC,KAAM,eACNvC,MAAO,CACHwC,MAAO,OACPC,WAAY,aAIxB,CACIN,EAAG,IACHC,YAAa,OACbC,MAAO,CACHC,MAAM,EACNC,KAAM,WACNvC,MAAO,CACHwC,MAAO,OACPC,WAAY,aAIxB,CACIN,EAAG,IACHC,YAAa,OACbC,MAAO,CACHC,MAAM,EACNC,KAAM,OACNvC,MAAO,CACHwC,MAAO,OACPC,WAAY,aAIxB,CACIN,EAAG,IACHC,YAAa,OACbC,MAAO,CACHC,MAAM,EACNC,KAAM,YACNvC,MAAO,CACHwC,MAAO,OACPC,WAAY,aAIxB,CACIN,EAAG,IACHC,YAAa,OACbC,MAAO,CACHC,MAAM,EACNC,KAAM,SACNvC,MAAO,CACHwC,MAAO,OACPC,WAAY,eAKhCC,WAAY,CACRC,SAAS,GAEbC,QAAS,CACLC,KAAM,EACN7C,MAAO,UAEX8C,MAAO,CACHP,KAAK,GAAD,OAAKxF,EAAL,sBACJgG,MAAO,UAEXC,MAAO,CACHnB,KAAM,WACNJ,IAAKD,EACLyB,WAAY,EACZC,OAAQ,CACJC,UAAW,SAAUC,GACjB,OAAO,IAAIhF,KAAKgF,GAAKC,WAAW9C,MAAM,EAAG,MAGjDuC,MAAO,CACHP,KAAM,cAGdL,MAAO,CACHgB,OAAQ,CACJC,UAAW,SAAUC,GACjB,OAAOA,IAGfN,MAAO,CACHP,KAAM,sBAGde,KAAM,CACFzB,KAAM,WACN0B,SAAU,CACNC,eAAgB,EAChBC,YAAa,GACbC,UAAW,GACXC,MAAO,CAAC,EAAG,QDjGNC,CAAa7G,EAAUyE,IAExCH,EAAarE,EAAWkD,KAAI,SAAA2D,GAAC,MAAI,CAACA,EAAElH,UAAWkH,EAAEjH,QACjD8E,EAAGT,OAAS,CAAC,CAAExC,KAAM4C,IACrBH,EAAU,CAAC,CAAEzC,KAAM4C,KACnBD,EAAWM,GAZXoC,KACC,CAAC9G,EAAWA,EAAW4B,OAAS,KAejC,qBAAKgD,GAAG,QAAR,SACE,cAAC,IAAD,CAAgBX,OAAQA,EAAQE,QAASA,EAASU,KAAK,OAAOC,OAAQ,SEyB7DiC,MA/Cf,WAEE,IAAMC,EAAK,IAAIC,UAAU,gCACzB,EAAoC5G,mBAAS,IAA7C,mBAAOH,EAAP,KAAmBgH,EAAnB,KACA,EAAsD7G,mBAAS,MAA/D,mBAAOF,EAAP,KAA4BgH,EAA5B,KAEA3G,qBAAU,WACR4G,MACC,IAEH,IAAMA,EAAU,WACdJ,EAAGK,OAAS,WACVC,QAAQC,IAAI,cAIdP,EAAGQ,UAAYC,oBAAS,SAAAC,GACtB,IAAMC,EAAUC,KAAKC,MAAMH,EAAIjG,MAC/ByF,EAAcS,KACb,KAEHX,EAAGc,QAAU,WACXR,QAAQC,IAAI,kBAQhB,OACE,sBAAK5E,UAAU,MAAf,UACE,cAAC,EAAD,CACEzC,WAAYA,EACZC,oBAAqBA,EACrBC,YAAa,SAAC2H,GAAD,OATEhG,EAS+BgG,OARlDZ,EAAuBxG,gBAAMoB,IADX,IAACA,KAWhB5B,GACC,qBAAKwC,UAAU,iBAAf,SACE,cAAC,EAAD,CAAc5C,SAAUI,EAAoBJ,SAC1CC,WAAYG,EAAoBH,mBClC7BgI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2e94c98c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/guide.27a484ad.JPG\";","export default class DataPoint {\r\n    constructor(timestamp, aqi) {\r\n        this.timestamp = timestamp;\r\n        this.aqi = aqi;\r\n    }\r\n    timestamp;\r\n    aqi;\r\n}","export default class CityRowData {\r\n    constructor(cityName, dataPoints = []) {\r\n        this.cityName = cityName;\r\n        this.dataPoints = dataPoints;\r\n    }\r\n    cityName;\r\n    dataPoints;\r\n    lastUpdateStatus;\r\n}","import { useEffect, useState } from 'react'\r\nimport { clone } from 'lodash';\r\nimport { Table, Card, CardTitle, CardBody, CardImg, Spinner, Row, Col } from 'reactstrap'\r\nimport './city-aqi-table.css';\r\nimport guideImg from '../../images/guide.JPG';\r\nimport DataPoint from '../../shared/models/datapoint';\r\nimport CityRowData from '../../shared/models/city-row-data';\r\nimport { numToFixedDecimal } from '../../shared/utility';\r\n\r\nconst CityAqiTable = ({ citiesData, selectedCityRowData, onRowSelect }) => {\r\n\r\n  const [citiesTable, setCitiesTable] = useState([]);\r\n  const dataHistoryLimit = 20;\r\n\r\n  useEffect(() => {\r\n    updateCityAqiTable();\r\n  }, [citiesData]);\r\n\r\n  const updateCityAqiTable = () => {\r\n    let citiesTable_clone = clone(citiesTable);\r\n\r\n    citiesData.forEach(({ city, aqi }) => {\r\n      //formatting aqi to 2 decimal places\r\n      const aqiVal = numToFixedDecimal(parseFloat(aqi), 2);\r\n      const currTimeStamp = new Date().getTime();\r\n      const dataPoint = new DataPoint(currTimeStamp, aqiVal);\r\n      const currCityRowData = citiesTable_clone.filter(data => data.cityName.toLowerCase() === city.toLowerCase())[0];\r\n\r\n      /*if data for curr city exists in table then append\r\n       the datapoint value else add currCity row data in table*/\r\n      if (currCityRowData) {\r\n        //maintaining max history upto a certain limit\r\n        //once limit is reached then remove oldest data point(0th pos) and add new data point in the end\r\n        const currCityDataPoints = currCityRowData.dataPoints;\r\n        if (currCityDataPoints.length >= dataHistoryLimit) {\r\n          currCityDataPoints.shift();\r\n        }\r\n        currCityDataPoints.push(dataPoint);\r\n      } else {\r\n        const cityData = new CityRowData(city, [dataPoint])\r\n        citiesTable_clone.push(cityData)\r\n      }\r\n    });\r\n\r\n    //updating last update status for all cities\r\n    citiesTable_clone.forEach(cityData => {\r\n      cityData.lastUpdateStatus = getlastUpdateStatus(cityData.dataPoints[cityData.dataPoints.length - 1].timestamp);\r\n    });\r\n\r\n    setCitiesTable(citiesTable_clone);\r\n  }\r\n\r\n  const getAqiCategoryClass = (aqiValue) => {\r\n    let defaultclass = 'aqi';\r\n    //doing this to handle aqi values that are between 50 to 51, 100 to 101, 200 to 201 and so on. \r\n    aqiValue = Math.floor(aqiValue);\r\n\r\n    if (aqiValue >= 0 && aqiValue <= 50) {\r\n      defaultclass = defaultclass + ' good';\r\n    } else if (aqiValue >= 51 && aqiValue <= 100) {\r\n      defaultclass = defaultclass + ' satisfactory';\r\n    } else if (aqiValue >= 101 && aqiValue <= 200) {\r\n      defaultclass = defaultclass + ' moderate';\r\n    } else if (aqiValue >= 201 && aqiValue <= 300) {\r\n      defaultclass = defaultclass + ' poor';\r\n    } else if (aqiValue >= 301 && aqiValue <= 400) {\r\n      defaultclass = defaultclass + ' verypoor';\r\n    } else if (aqiValue >= 401 && aqiValue <= 500) {\r\n      defaultclass = defaultclass + ' severe';\r\n    }\r\n    return defaultclass;\r\n  }\r\n\r\n  const getlastUpdateStatus = (lastUpdatedTime) => {\r\n    const lastUpdatedDate = new Date(lastUpdatedTime);\r\n    const currDate = new Date();\r\n    const timeDiff = (currDate.getTime() - lastUpdatedDate.getTime()) / 1000; //seconds\r\n    if (timeDiff < 1) {\r\n      return 'few milliseconds ago';\r\n    } else {\r\n      return `${Math.floor(timeDiff)} seconds ago`\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 tag=\"h5\" className=\"margin50\">Air Quality Index</h2>\r\n      <Row className=\"margin50\">\r\n        <Col>\r\n          <div className=\"text-center aqitable\">\r\n            <Table bordered>\r\n              <thead>\r\n                <tr style={{ display: 'fixed' }}>\r\n                  <th>#</th>\r\n                  <th>City</th>\r\n                  <th>Current AQI</th>\r\n                  <th>Last Updated</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {citiesTable.map((cityRowData, i) =>\r\n                  <tr key={cityRowData.cityName}\r\n                    className={selectedCityRowData && selectedCityRowData.cityName === cityRowData.cityName ? 'selected' : ''}\r\n                    onClick={() => onRowSelect(cityRowData)}>\r\n                    <th scope=\"row\">{i + 1}</th>\r\n                    <td>{cityRowData.cityName}</td>\r\n                    <td className={getAqiCategoryClass(cityRowData.dataPoints.slice(-1)[0].aqi)}>\r\n                      {cityRowData.dataPoints.slice(-1)[0].aqi}\r\n                    </td>\r\n                    <td>{cityRowData.lastUpdateStatus}</td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n          </div >\r\n        </Col>\r\n        <Col className=\"guideImgCol\">\r\n          <Card >\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">Guide To Air Quality Index</CardTitle>\r\n            </CardBody>\r\n            <CardImg top src={guideImg} alt=\"AQI Guide\" />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityAqiTable;\r\n\r\n","//format any number to n decimal places \r\nexport const numToFixedDecimal = (num, decimal) => {\r\n    return parseFloat(num.toFixed(decimal));\r\n}","import { useEffect, useState } from 'react'\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { chartOptions } from './chart-config';\r\nimport { clone } from 'lodash';\r\n\r\nconst CityAqiChart = ({ cityName, dataPoints }) => {\r\n\r\n  const [series, setSeries] = useState([]);\r\n  const [options, setOptions] = useState({});\r\n\r\n  useEffect(() => {\r\n    generateChartData();\r\n  }, [dataPoints[dataPoints.length - 1]]);\r\n\r\n  function generateChartData() {\r\n    let seriesData = [];\r\n    const timestamps = dataPoints.map(dp => dp.timestamp);\r\n    const minTimeStamp = Math.min(...timestamps);\r\n    const op = clone(chartOptions(cityName, minTimeStamp));\r\n\r\n    seriesData = dataPoints.map(x => [x.timestamp, x.aqi]);\r\n    op.series = [{ data: seriesData }];\r\n    setSeries([{ data: seriesData }]);\r\n    setOptions(op);\r\n  }\r\n\r\n  return (\r\n    <div id=\"chart\">\r\n      <ReactApexChart series={series} options={options} type=\"area\" height={350} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityAqiChart;\r\n\r\n","export const chartOptions = (cityName, minTimeStamp) => {\r\n\r\n    return {\r\n        series: [{ data: [] }],\r\n        chart: {\r\n            id: 'area-datetime',\r\n            type: 'area',\r\n            height: 350,\r\n            zoom: {\r\n                autoScaleYaxis: true\r\n            }\r\n        },\r\n        annotations: {\r\n            yaxis: [\r\n                {\r\n                    y: 51,\r\n                    borderColor: '#999',\r\n                    label: {\r\n                        show: true,\r\n                        text: 'Satisfactory',\r\n                        style: {\r\n                            color: \"#fff\",\r\n                            background: '#00E396'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    y: 101,\r\n                    borderColor: '#999',\r\n                    label: {\r\n                        show: true,\r\n                        text: 'Moderate',\r\n                        style: {\r\n                            color: \"#fff\",\r\n                            background: '#00E396'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    y: 201,\r\n                    borderColor: '#999',\r\n                    label: {\r\n                        show: true,\r\n                        text: 'Poor',\r\n                        style: {\r\n                            color: \"#fff\",\r\n                            background: '#00E396'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    y: 301,\r\n                    borderColor: '#999',\r\n                    label: {\r\n                        show: true,\r\n                        text: 'Very Poor',\r\n                        style: {\r\n                            color: \"#fff\",\r\n                            background: '#00E396'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    y: 401,\r\n                    borderColor: '#999',\r\n                    label: {\r\n                        show: true,\r\n                        text: 'Severe',\r\n                        style: {\r\n                            color: \"#fff\",\r\n                            background: '#00E396'\r\n                        }\r\n                    }\r\n                }]\r\n        },\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        markers: {\r\n            size: 0,\r\n            style: 'hollow',\r\n        },\r\n        title: {\r\n            text: `${cityName} Air Quality Index`,\r\n            align: 'center'\r\n        },\r\n        xaxis: {\r\n            type: 'datetime',\r\n            min: minTimeStamp,\r\n            tickAmount: 6,\r\n            labels: {\r\n                formatter: function (val) {\r\n                    return new Date(val).toString().slice(0, 24);\r\n                },\r\n            },\r\n            title: {\r\n                text: 'Timestamp'\r\n            }\r\n        },\r\n        yaxis: {\r\n            labels: {\r\n                formatter: function (val) {\r\n                    return val;\r\n                },\r\n            },\r\n            title: {\r\n                text: 'Air Quality Index'\r\n            },\r\n        },\r\n        fill: {\r\n            type: 'gradient',\r\n            gradient: {\r\n                shadeIntensity: 1,\r\n                opacityFrom: 0.7,\r\n                opacityTo: 0.9,\r\n                stops: [0, 100]\r\n            }\r\n        },\r\n    }\r\n};","import { useEffect, useState } from 'react'\r\nimport './App.css';\r\nimport { throttle, clone } from 'lodash';\r\nimport CityAqiTable from './components/city-aqi-table/city-aqi-table';\r\nimport CityAqiChart from './components/city-aqi-chart/city-aqi-chart';\r\n\r\nfunction App() {\r\n\r\n  const ws = new WebSocket('wss://city-ws.herokuapp.com/')\r\n  const [citiesData, setCitiesData] = useState([]);\r\n  const [selectedCityRowData, setSelectedCityRowData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    connect();\r\n  }, [])\r\n\r\n  const connect = () => {\r\n    ws.onopen = () => {\r\n      console.log('connected');\r\n    }\r\n\r\n    //throttling the onmessage event and updating only once in 2 seconds\r\n    ws.onmessage = throttle(evt => {\r\n      const message = JSON.parse(evt.data);\r\n      setCitiesData(message)\r\n    }, 300)\r\n\r\n    ws.onclose = () => {\r\n      console.log('disconnected');\r\n    }\r\n  }\r\n\r\n  const onRowSelect = (cityData) => {\r\n    setSelectedCityRowData(clone(cityData));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <CityAqiTable\r\n        citiesData={citiesData}\r\n        selectedCityRowData={selectedCityRowData}\r\n        onRowSelect={(selectedRowData) => onRowSelect(selectedRowData)} />\r\n\r\n      {selectedCityRowData &&\r\n        <div className=\"chartContainer\">\r\n          <CityAqiChart cityName={selectedCityRowData.cityName}\r\n            dataPoints={selectedCityRowData.dataPoints} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}